{"mappings":"oeAKA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SACvC,IAAIC,EAAa,KACbC,EAAY,KACZC,EAAc,KAElB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAoCPR,EAAQe,iBAAiB,UAhCHC,IACpBA,EAAEC,iBACGD,EAAEE,OAAOC,QAEd,MACEC,UAAYZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,IACvBP,EAAEQ,cAENrB,EAAasB,OAAOJ,EAAMK,OAC1BtB,EAAYqB,OAAOH,EAAKI,OACxBrB,EAAcoB,OAAOF,EAAOG,OAE5B,IAAK,IAAIC,EAAI,EAAGA,GAAKtB,EAAasB,IAChCrB,EAAcqB,EAAGxB,GACdyB,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBV,EAAA+B,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAW,CAC5DuB,QAAO,IACTC,cAAc,OAGjBC,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBV,EAAA+B,OAAOK,QAAQ,sBAAoB3B,QAAeC,MAAW,CAC3DuB,QAAS,IACTC,cAAc,OAIpB7B,GAAcC,EAGhBY,EAAEQ,cAAcW","sources":["src/js/03-promises.js"],"sourcesContent":["// // Напиши скрипт, який на момент сабміту форми викликає функцію\n// createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється,\n//  і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n//\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nlet delayInput = null;\nlet stepInput = null;\nlet amountInput = null;\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst submitHandler = e => {\n  e.preventDefault();\n  if (!e.target.tagName === 'BUTTON') return;\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  delayInput = Number(delay.value);\n  stepInput = Number(step.value);\n  amountInput = Number(amount.value);\n\n  for (let i = 1; i <= amountInput; i++) {\n    createPromise(i, delayInput)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: 4000,\n          clickToClose: true,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: 4000,\n          clickToClose: true,\n        });\n      });\n\n    delayInput += stepInput;\n  }\n\n  e.currentTarget.reset();\n};\nformRef.addEventListener('submit', submitHandler);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","target","tagName","elements","delay1","step","amount","currentTarget","Number","value","i","then","Notify","success","timeout","clickToClose","catch","failure","reset"],"version":3,"file":"03-promises.891fe0b6.js.map"}